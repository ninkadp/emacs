#+TITLE: ND Emacs Configuration
#+AUTHOR: Nina DePalma
#+EMAIL: ninadepalma@gmail.com

This file contains my emacs config in a *literate style* with org-babel-mode.

* Basics

** Disable splash screen
#+begin_src emacs-lisp
  (setq inhibit-splash-screen 0)
#+end_src

** Enable transient mark mode
#+begin_src emacs-lisp
  (transient-mark-mode 1)
#+end_src

** Remove the scroll bar
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist
  	     '(vertical-scroll-bars . 0)) ; changed this from 'nil' to '0', change back if doesn't work
#+end_src

** And remove the tool bar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src

** Make emacs always full screen
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Add relative line numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
#+end_src

** Remember line number
#+begin_src emacs-lisp
  (if (fboundp #'save-place-mode)
      (save-place-mode +1)
    (setq-default save-place t))
#+end_src

** Font
Download Hack here: https://sourcefoundry.org/hack/
#+begin_src emacs-lisp

  (set-face-attribute 'default nil :family "Hack")
  (set-face-attribute 'default nil :height (* 9 10)) ;9pt
  
#+end_src

# I also saw this code somewhere...
# #+begin_src emacs-lisp
#   (set-frame-font "Hack 12" nil t)
# #+end_src

** Hi Lock mode
Hi Lock mode is a minor mode that highlights text that matches regular expressions you specify.
#+begin_src emacs-lisp
  
  (global-hi-lock-mode 1)

#+end_src

** Highlight current row
#+begin_src emacs-lisp
  
  (global-hl-line-mode 1)

#+end_src

** Personal emacs-wide variables
Also useful if I forget who I am
#+begin_src emacs-lisp
  (setq user-full-name "Nina DePalma"
        user-mail-address "ninadepalma@gmail.com")
#+end_src

** recentf
Set keybinding for recentf
#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+end_src

** Backups
Keep backup and temporary files in a temporary file directory
#+begin_src emacs-lisp
  (setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+end_src

** Prompt me for 'y/n' instead of 'yes/no'
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

* Package management

** straight.el
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

** But I also install use-package as well
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  ;;(setq straight-use-package-by-default t)
#+end_src

** Minimal package.el config for package archives
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))
#+end_src

* Theme
Set the theme to 'modus operandi tinted'. Add a gray background to org mode code blocks
#+begin_src emacs-lisp
  (use-package modus-themes
    :straight t
    :config

  (setq modus-themes-org-blocks 'gray-background)
  
  (load-theme 'modus-operandi)

  (define-key global-map (kbd "<f5>") #'modus-themes-toggle))
#+end_src

* Formatting

** multiple cursors
#+begin_src emacs-lisp
  (straight-use-package 'multiple-cursors)
  (require 'multiple-cursors)
#+end_src

When you have an active region that spans multiple lines, the following will add a cursor to each line:
#+begin_src emacs-lisp
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
#+end_src

When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:
#+begin_src emacs-lisp
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+end_src

First mark the word, then add more cursors.
To get out of multiple-cursors-mode, press <return> or C-g.
The latter will first disable multiple regions before disabling multiple cursors. If you want to insert a newline in multiple-cursors-mode, use C-j.

* Programming

** Parentheses
Check for alternatives here. what about:
(show-paren-mode)
(setq show-paren-style 'mixed)
(electric-pair-mode 1)
#+begin_src emacs-lisp
  (use-package smartparens
    :straight t
    :config
    ;; Remove ' and  from pairing
    ;;(sp-pair "'" nil :actions :rem)
    ;;(sp-pair "`" "'" :actions :rem)
    (smartparens-global-mode 1))
#+end_src

** Indentation
=aggressive-indent-mode= is a minor mode that keeps your code always indented.
It reindents after every change
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :straight t
    :config
    (global-aggressive-indent-mode t))
#+end_src
** Python
Review each part of this...
*** elpy
#+begin_src emacs-lisp
  (setq python-shell-interpreter "C:\\Users\\ndepalma\\AppData\\Local\\Programs\\Python\\Python310\\python.exe")

  ;; Elpy is an extension for the Emacs text editor to work with Python projects
  ;; need to use straight.el instead.............
  (use-package elpy
    :init
  (elpy-enable))
#+end_src

*** auto-format on close
#+begin_src emacs-lisp
  (add-hook 'elpy-mode-hook (lambda ()
                              (add-hook 'before-save-hook
                                        'elpy-format-code nil t)))
#+end_src

** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :init (global-flycheck-mode))
#+end_src

Select which elpy modules we want. BTW, this disables flymake
#+begin_src emacs-lisp
  (setq elpy-modules (quote (elpy-module-company ;; look into each of these ... ..........
                             elpy-module-eldoc
                             elpy-module-pyvenv
                             elpy-module-yasnippet
                             elpy-module-sane-defaults)))
#+end_src

Permanently enable syntax checking with Flycheck
#+begin_src emacs-lisp
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+end_src

*** pylint configuration
Find pylint using =where pylint=
Generate pylint rc file as needed with =pylint --generate-rcfile > path\.pylintrc=
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook
  	  (lambda ()
  	    (setq flycheck-python-pylint-executable "C:\\Users\\ndepalma\\AppData\\Local\\Programs\\Python\\Python310\\Scripts\\pylint.exe")
  	    (setq flycheck-pylintrc (substitute-in-file-name "C:\\Users\\ndepalma\\.pylintrc"))))
#+end_src
** magit
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :bind 
    (("C-c g"     . 'magit-status)
     ("C-c C-p"   . 'magit-push)))
#+end_src
* Org mode
I use org mode to keep a running task list for work
#+begin_src emacs-lisp
  (use-package org)
  (require 'org)
#+end_src

** global TODO statuses
Because I use org mode for work, I have a sequence for the stages of my development work.
#+begin_src emacs-lisp
  (setq org-todo-keywords
      '((sequence "TODO" "IN-PROGRESS" "WAITING" "|" "DONE" "REMOVED")
	(sequence "DEV" "TEST" "PROD" "DONE")))
#+end_src

Log time when task marked as done
#+begin_src emacs-lisp
  (setq org-log-done t)
#+end_src

#+begin_src emacs-lisp
  ;;(setq org-archive-location "~/org/work/dash_archive.org::")
#+end_src

org mode docs says:
Bind org-store-link, org-capture, and org-agenda to globally available keys to make them
accessible anywhere in Emacs
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
#+end_src

** org capture templates
Use these to create org tasks anywhere in emacs and send them to the master task file
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/work/dash.org" "========================= Unsorted TODOs =========================")
           "* TODO %?")
  	("l" "Todo with link" entry (file+headline "~/org/work/dash.org" "========================= Unsorted TODOs =========================")
  	 "* TODO %?\n  %i\n %a\n")
          ("j" "Journal" entry (file+datetree "~/org/life/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")))
#+end_src

** bulleted lists
#+begin_src emacs-lisp
  (setq org-ellipsis " â†´")

  (use-package org-bullets
    :straight t)
  
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-hide-leading-stars t)
#+end_src

* go-translate
#+begin_src emacs-lisp
  (straight-use-package 'go-translate)

  (setq gts-translate-list '(("en" "de") ("en" "hu") ("en" "ru")))
#+end_src
* helm
Helm!
#+begin_src emacs-lisp
  (straight-use-package 'helm)
#+end_src

Set keybinding for helm-mini
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c h") 'helm-mini)
#+end_src

Set keybinding for helm-find-files
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
#+end_src



Enable helm-mode
#+begin_src emacs-lisp
  (helm-mode 1)
#+end_src
* nov.el
#+begin_src emacs-lisp
  (straight-use-package 'nov)
#+end_src
* Misc
Eventually I think I should move this to a separate file
#+begin_src emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(org-agenda-files '("c:/Users/ndepalma/org/work/dash.org"))
   '(package-selected-packages '(org-books go-translate elpy use-package)))

  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+end_src
